D G "__PCM__" 0 0 ""5.108Pd""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""3-Sep-22""
D G "__TIME__" 0 0 ""02:22:20""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__16F628A" 0 0 "1" "* File:   main.c"
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
c L "set_tris_a" 1 1 6 "FUNCTION"
F N "set_tris_a" 1 37 ""
V L "value" 1 37 "int8" `54 
F B "set_tris_a" 1 37 "void(int8 value)" `53 
F N "set_tris_b" 1 38 ""
V L "value" 1 38 "int8" `56 
F B "set_tris_b" 1 38 "void(int8 value)" `55 
F N "get_tris_a" 1 39 ""
F B "get_tris_a" 1 39 "int8()" `57 
F N "get_tris_b" 1 40 ""
F B "get_tris_b" 1 40 "int8()" `58 
F N "output_a" 1 41 ""
V L "value" 1 41 "int8" `60 
F B "output_a" 1 41 "void(int8 value)" `59 
F N "output_b" 1 42 ""
V L "value" 1 42 "int8" `62 
F B "output_b" 1 42 "void(int8 value)" `61 
F N "input_a" 1 43 ""
F B "input_a" 1 43 "int8()" `63 
F N "input_b" 1 44 ""
F B "input_b" 1 44 "int8()" `64 
F N "input_change_a" 1 45 ""
F B "input_change_a" 1 45 "int8()" `65 
F N "input_change_b" 1 46 ""
F B "input_change_b" 1 46 "int8()" `66 
F N "port_b_pullups" 1 47 ""
V L "value" 1 47 "int8" `68 
F B "port_b_pullups" 1 47 "void(int8 value)" `67 
F N "input" 1 48 ""
V L "pin" 1 48 "int16" `70 
F B "input" 1 48 "int8(int16 pin)" `69 
F N "input_state" 1 49 ""
V L "pin" 1 49 "int16" `72 
F B "input_state" 1 49 "int8(int16 pin)" `71 
F N "output_low" 1 50 ""
V L "pin" 1 50 "int16" `74 
F B "output_low" 1 50 "void(int16 pin)" `73 
F N "output_high" 1 51 ""
V L "pin" 1 51 "int16" `76 
F B "output_high" 1 51 "void(int16 pin)" `75 
F N "output_toggle" 1 52 ""
V L "pin" 1 52 "int16" `78 
F B "output_toggle" 1 52 "void(int16 pin)" `77 
F N "output_bit" 1 53 ""
V L "pin" 1 53 "int16" `80 
V L "level" 1 53 "int8" `81 
F B "output_bit" 1 53 "void(int16 pin,int8 level)" `79 
F N "output_float" 1 54 ""
V L "pin" 1 54 "int16" `83 
F B "output_float" 1 54 "void(int16 pin)" `82 
F N "output_drive" 1 55 ""
V L "pin" 1 55 "int16" `85 
F B "output_drive" 1 55 "void(int16 pin)" `84  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 59 "40"
D G "PIN_A1" 1 60 "41"
D G "PIN_A2" 1 61 "42"
D G "PIN_A3" 1 62 "43"
D G "PIN_A4" 1 63 "44"
D G "PIN_A5" 1 64 "45"
D G "PIN_A6" 1 65 "46"
D G "PIN_A7" 1 66 "47"
D G "PIN_B0" 1 68 "48"
D G "PIN_B1" 1 69 "49"
D G "PIN_B2" 1 70 "50"
D G "PIN_B3" 1 71 "51"
D G "PIN_B4" 1 72 "52"
D G "PIN_B5" 1 73 "53"
D G "PIN_B6" 1 74 "54"
D G "PIN_B7" 1 75 "55"
D G "FALSE" 1 78 "0"
D G "TRUE" 1 79 "1"
D G "BYTE" 1 81 "int8"
D G "BOOLEAN" 1 82 "int1"
D G "getc" 1 84 "getch"
D G "fgetc" 1 85 "getch"
D G "getchar" 1 86 "getch"
D G "putc" 1 87 "putchar"
D G "fputc" 1 88 "putchar"
D G "fgets" 1 89 "gets"
D G "fputs" 1 90 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
F N "restart_cause" 1 95 ""
F B "restart_cause" 1 95 "int8()" `86 
F N "reset_cpu" 1 96 ""
F B "reset_cpu" 1 96 "void()" `87 
F N "sleep" 1 97 ""
F B "sleep" 1 97 "void()" `88  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_FROM_SLEEP" 1 99 "3"
D G "WDT_TIMEOUT" 1 100 "11"
D G "MCLR_FROM_SLEEP" 1 101 "19"
D G "MCLR_FROM_RUN" 1 102 "27"
D G "NORMAL_POWER_UP" 1 103 "25"
D G "BROWNOUT_RESTART" 1 104 "26"
c L "sleep" 1 1 5 "FUNCTION"
F N "setup_timer_0" 1 111 ""
V L "mode" 1 111 "int8" `90 
F B "setup_timer_0" 1 111 "void(int8 mode)" `89 
F N "set_timer0" 1 112 ""
V L "value" 1 112 "int8" `92 
F B "set_timer0" 1 112 "void(int8 value)" `91 
F N "get_timer0" 1 113 ""
F B "get_timer0" 1 113 "int8()" `93 
F N "setup_counters" 1 114 ""
V L "mode" 1 114 "int8" `95 
V L "prescaler" 1 114 "int8" `96 
F B "setup_counters" 1 114 "void(int8 mode,int8 prescaler)" `94 
F N "set_rtcc" 1 115 ""
V L "value" 1 115 "int8" `98 
F B "set_rtcc" 1 115 "void(int8 value)" `97 
F N "get_rtcc" 1 116 ""
F B "get_rtcc" 1 116 "int8()" `99  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 1 118 "0"
D G "T0_EXT_L_TO_H" 1 119 "32"
D G "T0_EXT_H_TO_L" 1 120 "48"
D G "T0_DIV_1" 1 122 "8"
D G "T0_DIV_2" 1 123 "0"
D G "T0_DIV_4" 1 124 "1"
D G "T0_DIV_8" 1 125 "2"
D G "T0_DIV_16" 1 126 "3"
D G "T0_DIV_32" 1 127 "4"
D G "T0_DIV_64" 1 128 "5"
D G "T0_DIV_128" 1 129 "6"
D G "T0_DIV_256" 1 130 "7"
D G "T0_8_BIT" 1 133 "0"
D G "RTCC_INTERNAL" 1 137 "0"
D G "RTCC_EXT_L_TO_H" 1 138 "32"
D G "RTCC_EXT_H_TO_L" 1 139 "48"
D G "RTCC_DIV_1" 1 140 "8"
D G "RTCC_DIV_2" 1 141 "0"
D G "RTCC_DIV_4" 1 142 "1"
D G "RTCC_DIV_8" 1 143 "2"
D G "RTCC_DIV_16" 1 144 "3"
D G "RTCC_DIV_32" 1 145 "4"
D G "RTCC_DIV_64" 1 146 "5"
D G "RTCC_DIV_128" 1 147 "6"
D G "RTCC_DIV_256" 1 148 "7"
D G "RTCC_8_BIT" 1 149 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
F N "setup_wdt" 1 160 ""
V L "mode" 1 160 "int16" `101 
F B "setup_wdt" 1 160 "void(int16 mode)" `100 
F N "restart_wdt" 1 161 ""
F B "restart_wdt" 1 161 "void()" `102  "Constants used for SETUP_WDT() are:"
D G "WDT_18MS" 1 164 "8"
D G "WDT_36MS" 1 165 "9"
D G "WDT_72MS" 1 166 "10"
D G "WDT_144MS" 1 167 "11"
D G "WDT_288MS" 1 168 "12"
D G "WDT_576MS" 1 169 "13"
D G "WDT_1152MS" 1 170 "14"
D G "WDT_2304MS" 1 171 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
F N "setup_timer_1" 1 177 ""
V L "mode" 1 177 "int16" `104 
F B "setup_timer_1" 1 177 "void(int16 mode)" `103 
F N "get_timer1" 1 178 ""
F B "get_timer1" 1 178 "int16()" `105 
F N "set_timer1" 1 179 ""
V L "value" 1 179 "int16" `107 
F B "set_timer1" 1 179 "void(int16 value)" `106  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 182 "0"
D G "T1_INTERNAL" 1 183 "0x85"
D G "T1_EXTERNAL" 1 184 "0x87"
D G "T1_EXTERNAL_SYNC" 1 185 "0x83"
D G "T1_CLK_OUT" 1 187 "8"
D G "T1_DIV_BY_1" 1 189 "0"
D G "T1_DIV_BY_2" 1 190 "0x10"
D G "T1_DIV_BY_4" 1 191 "0x20"
D G "T1_DIV_BY_8" 1 192 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
F N "setup_timer_2" 1 197 ""
V L "mode" 1 197 "int8" `109 
V L "period" 1 197 "int8" `110 
V L "postscale" 1 197 "int8" `111 
F B "setup_timer_2" 1 197 "void(int8 mode,int8 period,int8 postscale)" `108 
F N "get_timer2" 1 198 ""
F B "get_timer2" 1 198 "int8()" `112 
F N "set_timer2" 1 199 ""
V L "value" 1 199 "int8" `114 
F B "set_timer2" 1 199 "void(int8 value)" `113  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 201 "0"
D G "T2_DIV_BY_1" 1 202 "4"
D G "T2_DIV_BY_4" 1 203 "5"
D G "T2_DIV_BY_16" 1 204 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
F N "setup_ccp1" 1 210 ""
V L "mode" 1 210 "int32" `116 
F B "setup_ccp1" 1 210 "void(int32 mode)" `115 
F N "setup_ccp1" 1 211 ""
V L "mode" 1 211 "int32" `118 
V L "pwm" 1 211 "int8" `119 
F B "setup_ccp1" 1 211 "void(int32 mode,int8 pwm)" `117 
F N "set_pwm1_duty" 1 212 ""
V L "value" 1 212 "int8" `121 
F B "set_pwm1_duty" 1 212 "void(int8 value)" `120 
F N "set_pwm1_duty" 1 213 ""
V L "value" 1 213 "int16" `123 
F B "set_pwm1_duty" 1 213 "void(int16 value)" `122  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 215 "0"
D G "CCP_CAPTURE_FE" 1 216 "0x04"
D G "CCP_CAPTURE_RE" 1 217 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 218 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 219 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 1 220 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 221 "0x09"
D G "CCP_COMPARE_INT" 1 222 "0x0A"
D G "CCP_COMPARE_RESET_TIMER" 1 223 "0x0B"
D G "CCP_PWM" 1 224 "0x0C"
D G "CCP_PWM_PLUS_1" 1 225 "0x1c"
D G "CCP_PWM_PLUS_2" 1 226 "0x2c"
D G "CCP_PWM_PLUS_3" 1 227 "0x3c"
c L "set_pwm1_duty" 1 1 2 "FUNCTION"
F N "setup_uart" 1 235 ""
V L "baud" 1 235 "int32" `128 
F B "setup_uart" 1 235 "void(int32 baud)" `127 
F N "setup_uart" 1 236 ""
V L "baud" 1 236 "int32" `130 
V L "stream" 1 236 "int8" `131 
F B "setup_uart" 1 236 "void(int32 baud,int8 stream)" `129 
F N "setup_uart" 1 237 ""
V L "baud" 1 237 "int32" `133 
V L "stream" 1 237 "int8" `134 
V L "clock" 1 237 "int32" `135 
F B "setup_uart" 1 237 "void(int32 baud,int8 stream,int32 clock)" `132 
F N "set_uart_speed" 1 238 ""
V L "baud" 1 238 "int32" `137 
F B "set_uart_speed" 1 238 "void(int32 baud)" `136 
F N "set_uart_speed" 1 239 ""
V L "baud" 1 239 "int32" `139 
V L "stream" 1 239 "int8" `140 
F B "set_uart_speed" 1 239 "void(int32 baud,int8 stream)" `138 
F N "set_uart_speed" 1 240 ""
V L "baud" 1 240 "int32" `142 
V L "stream" 1 240 "int8" `143 
V L "clock" 1 240 "int32" `144 
F B "set_uart_speed" 1 240 "void(int32 baud,int8 stream,int32 clock)" `141  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 244 "2"
D G "UART_DATA" 1 245 "4"
c L "set_uart_speed" 1 1 3 "FUNCTION"
F N "setup_comparator" 1 249 ""
V L "mode" 1 249 "int32" `146 
F B "setup_comparator" 1 249 "void(int32 mode)" `145  "Constants used in setup_comparator() are:"
D G "A0_A3_A1_A2" 1 251 "0xfff04"
D G "A0_A2_A1_A2" 1 252 "0x7ff03"
D G "NC_NC_A1_A2" 1 253 "0x6ff05"
D G "NC_NC_NC_NC" 1 254 "0x0ff07"
D G "A0_VR_A1_VR" 1 255 "0x3ff02"
D G "A3_VR_A2_VR" 1 256 "0xcff0A"
D G "A0_A2_A1_A2_OUT_ON_A3_A4" 1 257 "0x7e706"
D G "A3_A2_A1_A2" 1 258 "0xeff09"
D G "CP1_INVERT" 1 259 "0x00010"
D G "CP2_INVERT" 1 260 "0x00020"
c L "setup_comparator" 1 1 2 "FUNCTION"
F N "setup_vref" 1 267 ""
V L "mode" 1 267 "int8" `150 
F B "setup_vref" 1 267 "void(int8 mode)" `149  "Constants used in setup_vref() are:"
D G "VREF_LOW" 1 269 "0xa0"
D G "VREF_HIGH" 1 270 "0x80"
D G "VREF_A2" 1 272 "0x40"
c L "setup_vref" 1 1 2 "FUNCTION"
F N "setup_oscillator" 1 276 ""
V L "mode" 1 276 "int8" `152 
F B "setup_oscillator" 1 276 "void(int8 mode)" `151  "Constants used in setup_oscillator() are:"
D G "OSC_48KHZ" 1 278 "0"
D G "OSC_4MHZ" 1 279 "8"
c L "setup_oscillator" 1 1 3 "FUNCTION"
F N "abs" 1 285 ""
V L "x" 1 285 "sint8" `154 
F B "abs" 1 285 "sint8(sint8 x)" `153 
F N "abs" 1 286 ""
V L "x" 1 286 "sint16" `156 
F B "abs" 1 286 "sint16(sint16 x)" `155 
F N "abs" 1 287 ""
V L "x" 1 287 "sint32" `158 
F B "abs" 1 287 "sint32(sint32 x)" `157 
F N "abs" 1 288 ""
V L "x" 1 288 "float" `160 
F B "abs" 1 288 "float(float x)" `159 
F N "_mul" 1 289 ""
V L "??65535" 1 289 "int8" `162 
V L "??65535" 1 289 "int8" `163 
F B "_mul" 1 289 "int16(int8 ,int8 )" `161 
F N "_mul" 1 290 ""
V L "??65535" 1 290 "sint8" `165 
V L "??65535" 1 290 "sint8" `166 
F B "_mul" 1 290 "sint16(sint8 ,sint8 )" `164 
F N "_mul" 1 291 ""
V L "??65535" 1 291 "int16" `168 
V L "??65535" 1 291 "int16" `169 
F B "_mul" 1 291 "int32(int16 ,int16 )" `167 
F N "_mul" 1 292 ""
V L "??65535" 1 292 "sint16" `171 
V L "??65535" 1 292 "sint16" `172 
F B "_mul" 1 292 "sint32(sint16 ,sint16 )" `170  "Memory Manipulation Prototypes:"
F N "read_bank" 1 295 ""
V L "bank" 1 295 "int8" `174 
V L "offset" 1 295 "int8" `175 
F B "read_bank" 1 295 "int8(int8 bank,int8 offset)" `173 
F N "write_bank" 1 296 ""
V L "bank" 1 296 "int8" `177 
V L "offset" 1 296 "int8" `178 
V L "value" 1 296 "int8" `179 
F B "write_bank" 1 296 "void(int8 bank,int8 offset,int8 value)" `176 
F N "strcpy" 1 297 ""
V L "dest" 1 297 "*int8" `181 
V L "src" 1 297 "*int8" `182 
F B "strcpy" 1 297 "void(*int8 dest,*int8 src)" `180 
F N "memset" 1 298 ""
V L "destination" 1 298 "*int8" `184 
V L "value" 1 298 "int8" `185 
V L "num" 1 298 "int16" `186 
F B "memset" 1 298 "void(*int8 destination,int8 value,int16 num)" `183 
F N "memcpy" 1 299 ""
V L "destination" 1 299 "*int8" `188 
V L "source" 1 299 "*int8" `189 
V L "num" 1 299 "int16" `190 
F B "memcpy" 1 299 "void(*int8 destination,*int8 source,int16 num)" `187  "String Prototypes:"
F N "toupper" 1 302 ""
V L "cvalue" 1 302 "int8" `192 
F B "toupper" 1 302 "int8(int8 cvalue)" `191 
F N "tolower" 1 303 ""
V L "cvalue" 1 303 "int8" `194 
F B "tolower" 1 303 "int8(int8 cvalue)" `193 
F N "sprintf" 1 304 ""
V L "string" 1 304 "*int8" `196 
V L "cstring" 1 304 "*int8" `197 
F B "sprintf" 1 304 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `195  "Data Manipulators Prototypes:"
F N "shift_left" 1 307 ""
V L "address" 1 307 "*int8" `200 
V L "bytes" 1 307 "int8" `201 
V L "value" 1 307 "int8" `202 
F B "shift_left" 1 307 "int8(*int8 address,int8 bytes,int8 value)" `199 
F N "shift_right" 1 308 ""
V L "address" 1 308 "*int8" `204 
V L "bytes" 1 308 "int8" `205 
V L "value" 1 308 "int8" `206 
F B "shift_right" 1 308 "int8(*int8 address,int8 bytes,int8 value)" `203 
F N "rotate_left" 1 309 ""
V L "address" 1 309 "*int8" `208 
V L "bytes" 1 309 "int8" `209 
F B "rotate_left" 1 309 "void(*int8 address,int8 bytes)" `207 
F N "rotate_right" 1 310 ""
V L "address" 1 310 "*int8" `211 
V L "bytes" 1 310 "int8" `212 
F B "rotate_right" 1 310 "void(*int8 address,int8 bytes)" `210 
F N "swap" 1 311 ""
V L "value" 1 311 "int8" `214 
F B "swap" 1 311 "void(int8 value)" `213 
F N "make8" 1 312 ""
V L "var" 1 312 "int16" `216 
V L "offset" 1 312 "int8" `217 
F B "make8" 1 312 "int8(int16 var,int8 offset)" `215 
F N "make8" 1 313 ""
V L "var" 1 313 "int32" `219 
V L "offset" 1 313 "int8" `220 
F B "make8" 1 313 "int8(int32 var,int8 offset)" `218 
F N "make16" 1 314 ""
V L "varhigh" 1 314 "int8" `222 
V L "varlow" 1 314 "int8" `223 
F B "make16" 1 314 "int16(int8 varhigh,int8 varlow)" `221 
F N "make32" 1 315 ""
V L "var1" 1 315 "int16" `225 
F B "make32" 1 315 "int32(int16 var1)" `224 
F N "make32" 1 316 ""
V L "var1" 1 316 "int16" `227 
V L "var2" 1 316 "int16" `228 
F B "make32" 1 316 "int32(int16 var1,int16 var2)" `226 
F N "make32" 1 317 ""
V L "var1" 1 317 "int16" `230 
V L "var2" 1 317 "int8" `231 
F B "make32" 1 317 "int32(int16 var1,int8 var2)" `229 
F N "make32" 1 318 ""
V L "var1" 1 318 "int16" `233 
V L "var2" 1 318 "int8" `234 
V L "var3" 1 318 "int8" `235 
F B "make32" 1 318 "int32(int16 var1,int8 var2,int8 var3)" `232 
F N "make32" 1 319 ""
V L "var1" 1 319 "int8" `237 
F B "make32" 1 319 "int32(int8 var1)" `236 
F N "make32" 1 320 ""
V L "var1" 1 320 "int8" `239 
V L "var2" 1 320 "int8" `240 
F B "make32" 1 320 "int32(int8 var1,int8 var2)" `238 
F N "make32" 1 321 ""
V L "var1" 1 321 "int8" `242 
V L "var2" 1 321 "int8" `243 
V L "var3" 1 321 "int8" `244 
F B "make32" 1 321 "int32(int8 var1,int8 var2,int8 var3)" `241 
F N "make32" 1 322 ""
V L "var1" 1 322 "int8" `246 
V L "var2" 1 322 "int8" `247 
V L "var3" 1 322 "int8" `248 
V L "var4" 1 322 "int8" `249 
F B "make32" 1 322 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `245 
F N "make32" 1 323 ""
V L "var1" 1 323 "int8" `251 
V L "var2" 1 323 "int16" `252 
F B "make32" 1 323 "int32(int8 var1,int16 var2)" `250 
F N "make32" 1 324 ""
V L "var1" 1 324 "int8" `254 
V L "var2" 1 324 "int16" `255 
V L "var3" 1 324 "int8" `256 
F B "make32" 1 324 "int32(int8 var1,int16 var2,int8 var3)" `253 
F N "make32" 1 325 ""
V L "var1" 1 325 "int8" `258 
V L "var2" 1 325 "int8" `259 
V L "var3" 1 325 "int16" `260 
F B "make32" 1 325 "int32(int8 var1,int8 var2,int16 var3)" `257 
F N "bit_set" 1 326 ""
V L "var" 1 326 "int8" `262 
V L "bit" 1 326 "int8" `263 
F B "bit_set" 1 326 "void(int8 var,int8 bit)" `261 
F N "bit_set" 1 327 ""
V L "var" 1 327 "int16" `265 
V L "bit" 1 327 "int8" `266 
F B "bit_set" 1 327 "void(int16 var,int8 bit)" `264 
F N "bit_set" 1 328 ""
V L "var" 1 328 "int32" `268 
V L "bit" 1 328 "int8" `269 
F B "bit_set" 1 328 "void(int32 var,int8 bit)" `267 
F N "bit_clear" 1 329 ""
V L "var" 1 329 "int8" `271 
V L "bit" 1 329 "int8" `272 
F B "bit_clear" 1 329 "void(int8 var,int8 bit)" `270 
F N "bit_clear" 1 330 ""
V L "var" 1 330 "int16" `274 
V L "bit" 1 330 "int8" `275 
F B "bit_clear" 1 330 "void(int16 var,int8 bit)" `273 
F N "bit_clear" 1 331 ""
V L "var" 1 331 "int32" `277 
V L "bit" 1 331 "int8" `278 
F B "bit_clear" 1 331 "void(int32 var,int8 bit)" `276 
F N "bit_test" 1 332 ""
V L "var" 1 332 "int8" `280 
V L "bit" 1 332 "int8" `281 
F B "bit_test" 1 332 "int8(int8 var,int8 bit)" `279 
F N "bit_test" 1 333 ""
V L "var" 1 333 "int16" `283 
V L "bit" 1 333 "int8" `284 
F B "bit_test" 1 333 "int8(int16 var,int8 bit)" `282 
F N "bit_test" 1 334 ""
V L "var" 1 334 "int32" `286 
V L "bit" 1 334 "int8" `287 
F B "bit_test" 1 334 "int8(int32 var,int8 bit)" `285  "#use delay() Prototypes:"
F N "delay_cycles" 1 337 ""
V L "count" 1 337 "int8" `289 
F B "delay_cycles" 1 337 "void(int8 count)" `288 
F N "delay_ms" 1 338 ""
V L "time" 1 338 "int16" `291 
F B "delay_ms" 1 338 "void(int16 time)" `290 
F N "delay_us" 1 339 ""
V L "time" 1 339 "int16" `293 
F B "delay_us" 1 339 "void(int16 time)" `292  "#use rs232() Prototypes:"
F N "putchar" 1 342 ""
V L "cdata" 1 342 "int8" `295 
F B "putchar" 1 342 "void(int8 cdata)" `294 
F N "putchar" 1 343 ""
V L "cdata" 1 343 "int8" `297 
V L "stream" 1 343 "int8" `298 
F B "putchar" 1 343 "void(int8 cdata,int8 stream)" `296 
F N "puts" 1 344 ""
V L "string" 1 344 "*int8" `300 
F B "puts" 1 344 "void(*int8 string)" `299 
F N "puts" 1 345 ""
V L "string" 1 345 "*int8" `302 
V L "stream" 1 345 "int8" `303 
F B "puts" 1 345 "void(*int8 string,int8 stream)" `301 
F N "getch" 1 346 ""
F B "getch" 1 346 "int8()" `304 
F N "getch" 1 347 ""
V L "stream" 1 347 "int8" `306 
F B "getch" 1 347 "int8(int8 stream)" `305 
F N "gets" 1 348 ""
V L "string" 1 348 "*int8" `308 
F B "gets" 1 348 "void(*int8 string)" `307 
F N "gets" 1 349 ""
V L "string" 1 349 "*int8" `310 
V L "stream" 1 349 "int8" `311 
F B "gets" 1 349 "void(*int8 string,int8 stream)" `309 
F N "kbhit" 1 350 ""
F B "kbhit" 1 350 "int8()" `312 
F N "kbhit" 1 351 ""
V L "stream" 1 351 "int8" `314 
F B "kbhit" 1 351 "int8(int8 stream)" `313 
F N "printf" 1 352 ""
V L "string" 1 352 "*int8" `316 
F B "printf" 1 352 "void(*int8 string,*int8 _VA_LIST)" `315 
F N "fprintf" 1 353 ""
V L "stream" 1 353 "int8" `319 
V L "string" 1 353 "*int8" `320 
F B "fprintf" 1 353 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `318 
F N "putc_send" 1 354 ""
F B "putc_send" 1 354 "void()" `322 
F N "fputc_send" 1 355 ""
V L "stream" 1 355 "int8" `324 
F B "fputc_send" 1 355 "void(int8 stream)" `323 
F N "rcv_buffer_full" 1 356 ""
F B "rcv_buffer_full" 1 356 "int8()" `325 
F N "rcv_buffer_full" 1 357 ""
V L "stream" 1 357 "int8" `327 
F B "rcv_buffer_full" 1 357 "int8(int8 stream)" `326 
F N "rcv_buffer_bytes" 1 358 ""
F B "rcv_buffer_bytes" 1 358 "int16()" `328 
F N "rcv_buffer_bytes" 1 359 ""
V L "stream" 1 359 "int8" `330 
F B "rcv_buffer_bytes" 1 359 "int16(int8 stream)" `329 
F N "tx_buffer_full" 1 360 ""
F B "tx_buffer_full" 1 360 "int8()" `331 
F N "tx_buffer_full" 1 361 ""
V L "stream" 1 361 "int8" `333 
F B "tx_buffer_full" 1 361 "int8(int8 stream)" `332 
F N "tx_buffer_bytes" 1 362 ""
F B "tx_buffer_bytes" 1 362 "int16()" `334 
F N "tx_buffer_bytes" 1 363 ""
V L "stream" 1 363 "int8" `336 
F B "tx_buffer_bytes" 1 363 "int16(int8 stream)" `335 
F N "linbus_header" 1 364 ""
V L "identifier" 1 364 "int8" `338 
F B "linbus_header" 1 364 "int8(int8 identifier)" `337 
F N "linbus_header" 1 365 ""
V L "stream" 1 365 "int8" `340 
V L "identifier" 1 365 "int8" `341 
F B "linbus_header" 1 365 "int8(int8 stream,int8 identifier)" `339 
F N "linbus_header_hit" 1 366 ""
F B "linbus_header_hit" 1 366 "int8()" `342 
F N "linbus_header_hit" 1 367 ""
V L "stream" 1 367 "int8" `344 
F B "linbus_header_hit" 1 367 "int8(int8 stream)" `343 
F N "linbus_header_get" 1 368 ""
F B "linbus_header_get" 1 368 "int8()" `345 
F N "linbus_header_get" 1 369 ""
V L "stream" 1 369 "int8" `347 
F B "linbus_header_get" 1 369 "int8(int8 stream)" `346 
F N "linbus_rx_response" 1 370 ""
V L "DataPtr" 1 370 "*int8" `349 
V L "count" 1 370 "int8" `350 
F B "linbus_rx_response" 1 370 "int8(*int8 DataPtr,int8 count)" `348 
F N "linbus_rx_response" 1 371 ""
V L "stream" 1 371 "int8" `352 
V L "DataPtr" 1 371 "*int8" `353 
V L "count" 1 371 "int8" `354 
F B "linbus_rx_response" 1 371 "int8(int8 stream,*int8 DataPtr,int8 count)" `351 
F N "linbus_tx_response" 1 372 ""
V L "DataPtr" 1 372 "*int8" `356 
V L "count" 1 372 "int8" `357 
F B "linbus_tx_response" 1 372 "void(*int8 DataPtr,int8 count)" `355 
F N "linbus_tx_response" 1 373 ""
V L "stream" 1 373 "int8" `359 
V L "DataPtr" 1 373 "*int8" `360 
V L "count" 1 373 "int8" `361 
F B "linbus_tx_response" 1 373 "void(int8 stream,*int8 DataPtr,int8 count)" `358 
F N "linbus_checksum_type" 1 374 ""
V L "type" 1 374 "int8" `363 
F B "linbus_checksum_type" 1 374 "void(int8 type)" `362 
F N "linbus_checksum_type" 1 375 ""
V L "stream" 1 375 "int8" `365 
V L "type" 1 375 "int8" `366 
F B "linbus_checksum_type" 1 375 "void(int8 stream,int8 type)" `364  "#use i2c() Prototypes:"
F N "i2c_read" 1 378 ""
F B "i2c_read" 1 378 "int8()" `367 
F N "i2c_read" 1 379 ""
V L "ack" 1 379 "int8" `369 
F B "i2c_read" 1 379 "int8(int8 ack)" `368 
F N "i2c_read" 1 380 ""
V L "stream" 1 380 "int8" `371 
V L "ack" 1 380 "int8" `372 
F B "i2c_read" 1 380 "int8(int8 stream,int8 ack)" `370 
F N "i2c_write" 1 381 ""
V L "data" 1 381 "int8" `374 
F B "i2c_write" 1 381 "int8(int8 data)" `373 
F N "i2c_write" 1 382 ""
V L "stream" 1 382 "int8" `376 
V L "data" 1 382 "int8" `377 
F B "i2c_write" 1 382 "int8(int8 stream,int8 data)" `375 
F N "i2c_start" 1 383 ""
F B "i2c_start" 1 383 "void()" `378 
F N "i2c_start" 1 384 ""
V L "stream" 1 384 "int8" `380 
F B "i2c_start" 1 384 "void(int8 stream)" `379 
F N "i2c_start" 1 385 ""
V L "stream" 1 385 "int8" `382 
V L "restart" 1 385 "int8" `383 
F B "i2c_start" 1 385 "void(int8 stream,int8 restart)" `381 
F N "i2c_stop" 1 386 ""
F B "i2c_stop" 1 386 "void()" `384 
F N "i2c_stop" 1 387 ""
V L "stream" 1 387 "int8" `386 
F B "i2c_stop" 1 387 "void(int8 stream)" `385 
F N "i2c_isr_state" 1 388 ""
F B "i2c_isr_state" 1 388 "int8()" `387 
F N "i2c_slaveaddr" 1 389 ""
V L "addr" 1 389 "int8" `389 
F B "i2c_slaveaddr" 1 389 "void(int8 addr)" `388 
F N "i2c_slaveaddr" 1 390 ""
V L "stream" 1 390 "int8" `391 
V L "addr" 1 390 "int8" `392 
F B "i2c_slaveaddr" 1 390 "void(int8 stream,int8 addr)" `390 
F N "i2c_poll" 1 391 ""
F B "i2c_poll" 1 391 "int8()" `393 
F N "i2c_poll" 1 392 ""
V L "stream" 1 392 "int8" `395 
F B "i2c_poll" 1 392 "int8(int8 stream)" `394 
F N "i2c_init" 1 393 ""
V L "baud" 1 393 "int32" `397 
F B "i2c_init" 1 393 "void(int32 baud)" `396 
F N "i2c_init" 1 394 ""
V L "stream" 1 394 "int8" `399 
V L "baud" 1 394 "int32" `400 
F B "i2c_init" 1 394 "void(int8 stream,int32 baud)" `398 
F N "i2c_transfer" 1 395 ""
V L "address" 1 395 "int8" `402 
V L "wData" 1 395 "*int8" `403 
V L "wCount" 1 395 "int8" `404 
F B "i2c_transfer" 1 395 "int8(int8 address,*int8 wData,int8 wCount)" `401 
F N "i2c_transfer" 1 396 ""
V L "address" 1 396 "int8" `406 
V L "wData" 1 396 "*int8" `407 
V L "wCount" 1 396 "int8" `408 
V L "rData" 1 396 "*int8" `409 
V L "rCount" 1 396 "*int8" `410 
F B "i2c_transfer" 1 396 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `405 
F N "i2c_transfer" 1 397 ""
V L "stream" 1 397 "int8" `412 
V L "address" 1 397 "int8" `413 
V L "wData" 1 397 "*int8" `414 
V L "wCount" 1 397 "int8" `415 
F B "i2c_transfer" 1 397 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `411 
F N "i2c_transfer" 1 398 ""
V L "stream" 1 398 "int8" `417 
V L "address" 1 398 "int8" `418 
V L "wData" 1 398 "*int8" `419 
V L "wCount" 1 398 "int8" `420 
V L "rData" 1 398 "*int8" `421 
V L "rCount" 1 398 "*int8" `422 
F B "i2c_transfer" 1 398 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `416 
F N "i2c_transfer_out" 1 399 ""
V L "address" 1 399 "int8" `424 
V L "wData" 1 399 "*int8" `425 
V L "wCount" 1 399 "int8" `426 
F B "i2c_transfer_out" 1 399 "int8(int8 address,*int8 wData,int8 wCount)" `423 
F N "i2c_transfer_out" 1 400 ""
V L "stream" 1 400 "int8" `428 
V L "address" 1 400 "int8" `429 
V L "wData" 1 400 "*int8" `430 
V L "wCount" 1 400 "int8" `431 
F B "i2c_transfer_out" 1 400 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `427 
F N "i2c_transfer_in" 1 401 ""
V L "address" 1 401 "int8" `433 
V L "rData" 1 401 "*int8" `434 
V L "rCount" 1 401 "int8" `435 
F B "i2c_transfer_in" 1 401 "int8(int8 address,*int8 rData,int8 rCount)" `432 
F N "i2c_transfer_in" 1 402 ""
V L "stream" 1 402 "int8" `437 
V L "address" 1 402 "int8" `438 
V L "rData" 1 402 "*int8" `439 
V L "rCount" 1 402 "int8" `440 
F B "i2c_transfer_in" 1 402 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `436  "#use spi() Prototypes:"
F N "spi_xfer" 1 405 ""
F B "spi_xfer" 1 405 "int8()" `441 
F N "spi_xfer" 1 406 ""
f G "spi_xfer" 1 406 "int16()" `442 
F N "spi_xfer" 1 407 ""
f G "spi_xfer" 1 407 "int32()" `442 
F N "spi_xfer" 1 408 ""
V L "data" 1 408 "int8" `443 
F B "spi_xfer" 1 408 "int8(int8 data)" `442 
F N "spi_xfer" 1 409 ""
V L "data" 1 409 "int16" `445 
F B "spi_xfer" 1 409 "int16(int16 data)" `444 
F N "spi_xfer" 1 410 ""
V L "data" 1 410 "int32" `447 
F B "spi_xfer" 1 410 "int32(int32 data)" `446 
F N "spi_xfer" 1 411 ""
V L "stream" 1 411 "int8" `449 
V L "data" 1 411 "int8" `450 
F B "spi_xfer" 1 411 "int8(int8 stream,int8 data)" `448 
F N "spi_xfer" 1 412 ""
V L "stream" 1 412 "int8" `452 
V L "data" 1 412 "int16" `453 
F B "spi_xfer" 1 412 "int16(int8 stream,int16 data)" `451 
F N "spi_xfer" 1 413 ""
V L "stream" 1 413 "int8" `455 
V L "data" 1 413 "int32" `456 
F B "spi_xfer" 1 413 "int32(int8 stream,int32 data)" `454 
F N "spi_xfer" 1 414 ""
V L "stream" 1 414 "int8" `458 
V L "data" 1 414 "int8" `459 
V L "bits" 1 414 "int8" `460 
F B "spi_xfer" 1 414 "int8(int8 stream,int8 data,int8 bits)" `457 
F N "spi_xfer" 1 415 ""
V L "stream" 1 415 "int8" `462 
V L "data" 1 415 "int16" `463 
V L "bits" 1 415 "int8" `464 
F B "spi_xfer" 1 415 "int16(int8 stream,int16 data,int8 bits)" `461 
F N "spi_xfer" 1 416 ""
V L "stream" 1 416 "int8" `466 
V L "data" 1 416 "int32" `467 
V L "bits" 1 416 "int8" `468 
F B "spi_xfer" 1 416 "int32(int8 stream,int32 data,int8 bits)" `465 
F N "spi_init" 1 417 ""
V L "baud" 1 417 "int32" `470 
F B "spi_init" 1 417 "void(int32 baud)" `469 
F N "spi_init" 1 418 ""
V L "stream" 1 418 "int8" `472 
V L "baud" 1 418 "int32" `473 
F B "spi_init" 1 418 "void(int8 stream,int32 baud)" `471 
F N "spi_speed" 1 419 ""
V L "baud" 1 419 "int32" `475 
F B "spi_speed" 1 419 "void(int32 baud)" `474 
F N "spi_speed" 1 420 ""
V L "stream" 1 420 "int8" `477 
V L "baud" 1 420 "int32" `478 
F B "spi_speed" 1 420 "void(int8 stream,int32 baud)" `476 
F N "spi_speed" 1 421 ""
V L "stream" 1 421 "int8" `480 
V L "baud" 1 421 "int32" `481 
V L "clock" 1 421 "int32" `482 
F B "spi_speed" 1 421 "void(int8 stream,int32 baud,int32 clock)" `479 
F N "spi_prewrite" 1 422 ""
V L "data" 1 422 "int8" `484 
F B "spi_prewrite" 1 422 "void(int8 data)" `483 
F N "spi_prewrite" 1 423 ""
V L "data" 1 423 "int16" `486 
F B "spi_prewrite" 1 423 "void(int16 data)" `485 
F N "spi_prewrite" 1 424 ""
V L "data" 1 424 "int32" `488 
F B "spi_prewrite" 1 424 "void(int32 data)" `487 
F N "spi_prewrite" 1 425 ""
V L "??65535" 1 425 "int8" `490 
V L "data" 1 425 "int8" `491 
F B "spi_prewrite" 1 425 "void(int8 ,int8 data)" `489 
F N "spi_prewrite" 1 426 ""
V L "??65535" 1 426 "int8" `493 
V L "data" 1 426 "int16" `494 
F B "spi_prewrite" 1 426 "void(int8 ,int16 data)" `492 
F N "spi_prewrite" 1 427 ""
V L "??65535" 1 427 "int8" `496 
V L "data" 1 427 "int32" `497 
F B "spi_prewrite" 1 427 "void(int8 ,int32 data)" `495 
F N "spi_xfer_in" 1 428 ""
F B "spi_xfer_in" 1 428 "int8()" `498 
F N "spi_xfer_in" 1 429 ""
f G "spi_xfer_in" 1 429 "int16()" `499 
F N "spi_xfer_in" 1 430 ""
f G "spi_xfer_in" 1 430 "int32()" `499 
F N "spi_xfer_in" 1 431 ""
V L "bits" 1 431 "int8" `500 
F B "spi_xfer_in" 1 431 "int8(int8 bits)" `499 
F N "spi_xfer_in" 1 432 ""
V L "bits" 1 432 "int8" `502 
f G "spi_xfer_in" 1 432 "int16(int8 bits)" `501 
F N "spi_xfer_in" 1 433 ""
V L "bits" 1 433 "int8" `502 
f G "spi_xfer_in" 1 433 "int32(int8 bits)" `501 
F N "spi_xfer_in" 1 434 ""
V L "stream" 1 434 "int8" `502 
V L "bits" 1 434 "int8" `503 
F B "spi_xfer_in" 1 434 "int8(int8 stream,int8 bits)" `501 
F N "spi_xfer_in" 1 435 ""
V L "stream" 1 435 "int8" `502 
V L "bits" 1 435 "int8" `506 
f G "spi_xfer_in" 1 435 "int16(int8 stream,int8 bits)" `504 
F N "spi_xfer_in" 1 436 ""
V L "stream" 1 436 "int8" `502 
V L "bits" 1 436 "int8" `506 
f G "spi_xfer_in" 1 436 "int32(int8 stream,int8 bits)" `504 
F N "spi_transfer" 1 437 ""
V L "wData" 1 437 "*int8" `505 
V L "rData" 1 437 "*int8" `506 
V L "count" 1 437 "int16" `507 
F B "spi_transfer" 1 437 "void(*int8 wData,*int8 rData,int16 count)" `504 
F N "spi_transfer" 1 438 ""
V L "stream" 1 438 "int8" `509 
V L "wData" 1 438 "*int8" `510 
V L "rData" 1 438 "*int8" `511 
V L "count" 1 438 "int16" `512 
F B "spi_transfer" 1 438 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `508 
F N "spi_transfer_write" 1 439 ""
V L "wData" 1 439 "*int8" `514 
V L "count" 1 439 "int16" `515 
F B "spi_transfer_write" 1 439 "void(*int8 wData,int16 count)" `513 
F N "spi_transfer_write" 1 440 ""
V L "stream" 1 440 "int8" `517 
V L "wData" 1 440 "*int8" `518 
V L "count" 1 440 "int16" `519 
F B "spi_transfer_write" 1 440 "void(int8 stream,*int8 wData,int16 count)" `516 
F N "spi_transfer_read" 1 441 ""
V L "rData" 1 441 "*int8" `521 
V L "count" 1 441 "int16" `522 
F B "spi_transfer_read" 1 441 "void(*int8 rData,int16 count)" `520 
F N "spi_transfer_read" 1 442 ""
V L "stream" 1 442 "int8" `524 
V L "rData" 1 442 "*int8" `525 
V L "count" 1 442 "int16" `526 
F B "spi_transfer_read" 1 442 "void(int8 stream,*int8 rData,int16 count)" `523  "#use rtos() Prototypes:"
F N "rtos_run" 1 445 ""
F B "rtos_run" 1 445 "void()" `527 
F N "rtos_yield" 1 446 ""
F B "rtos_yield" 1 446 "void()" `528 
F N "rtos_enable" 1 447 ""
V L "task" 1 447 "int8" `530 
F B "rtos_enable" 1 447 "void(int8 task)" `529 
F N "rtos_disable" 1 448 ""
V L "task" 1 448 "int8" `532 
F B "rtos_disable" 1 448 "void(int8 task)" `531 
F N "rtos_terminate" 1 449 ""
F B "rtos_terminate" 1 449 "void()" `533 
F N "rtos_await" 1 450 ""
V L "flag" 1 450 "int8" `535 
F B "rtos_await" 1 450 "void(int8 flag)" `534 
F N "rtos_wait" 1 451 ""
V L "sem" 1 451 "int8" `537 
F B "rtos_wait" 1 451 "void(int8 sem)" `536 
F N "rtos_signal" 1 452 ""
V L "sem" 1 452 "int8" `539 
F B "rtos_signal" 1 452 "void(int8 sem)" `538 
F N "rtos_msg_send" 1 453 ""
V L "task" 1 453 "int8" `541 
V L "msg" 1 453 "int8" `542 
F B "rtos_msg_send" 1 453 "void(int8 task,int8 msg)" `540 
F N "rtos_msg_read" 1 454 ""
F B "rtos_msg_read" 1 454 "int8()" `543 
F N "rtos_msg_poll" 1 455 ""
F B "rtos_msg_poll" 1 455 "int8()" `544 
F N "rtos_overrun" 1 456 ""
V L "task" 1 456 "int8" `546 
F B "rtos_overrun" 1 456 "int8(int8 task)" `545 
F N "rtos_stats" 1 457 ""
V L "task" 1 457 "int8" `548 
V L "stat" 1 457 "*int8" `549 
F B "rtos_stats" 1 457 "void(int8 task,*int8 stat)" `547  "#use timer() Prototypes:"
F N "get_ticks" 1 460 ""
F B "get_ticks" 1 460 "int8()" `550 
F N "get_ticks" 1 461 ""
f G "get_ticks" 1 461 "int16()" `551 
F N "get_ticks" 1 462 ""
f G "get_ticks" 1 462 "int32()" `551 
F N "get_ticks" 1 463 ""
V L "stream" 1 463 "int8" `552 
F B "get_ticks" 1 463 "int8(int8 stream)" `551 
F N "get_ticks" 1 464 ""
V L "stream" 1 464 "int8" `554 
f G "get_ticks" 1 464 "int16(int8 stream)" `553 
F N "get_ticks" 1 465 ""
V L "stream" 1 465 "int8" `554 
f G "get_ticks" 1 465 "int32(int8 stream)" `553 
F N "set_ticks" 1 466 ""
V L "value" 1 466 "int8" `554 
F B "set_ticks" 1 466 "void(int8 value)" `553 
F N "set_ticks" 1 467 ""
V L "value" 1 467 "int16" `556 
F B "set_ticks" 1 467 "void(int16 value)" `555 
F N "set_ticks" 1 468 ""
V L "value" 1 468 "int32" `558 
F B "set_ticks" 1 468 "void(int32 value)" `557 
F N "set_ticks" 1 469 ""
V L "stream" 1 469 "int8" `560 
V L "value" 1 469 "int8" `561 
F B "set_ticks" 1 469 "void(int8 stream,int8 value)" `559 
F N "set_ticks" 1 470 ""
V L "stream" 1 470 "int8" `563 
V L "value" 1 470 "int16" `564 
F B "set_ticks" 1 470 "void(int8 stream,int16 value)" `562 
F N "set_ticks" 1 471 ""
V L "stream" 1 471 "int8" `566 
V L "value" 1 471 "int32" `567 
F B "set_ticks" 1 471 "void(int8 stream,int32 value)" `565  "#use pwm() Prototypes:"
F N "pwm_on" 1 474 ""
F B "pwm_on" 1 474 "void()" `568 
F N "pwm_on" 1 475 ""
V L "stream" 1 475 "int8" `570 
F B "pwm_on" 1 475 "void(int8 stream)" `569 
F N "pwm_off" 1 476 ""
F B "pwm_off" 1 476 "void()" `571 
F N "pwm_off" 1 477 ""
V L "stream" 1 477 "int8" `573 
F B "pwm_off" 1 477 "void(int8 stream)" `572 
F N "pwm_set_duty" 1 478 ""
V L "duty" 1 478 "int16" `575 
F B "pwm_set_duty" 1 478 "void(int16 duty)" `574 
F N "pwm_set_duty" 1 479 ""
V L "stream" 1 479 "int8" `577 
V L "duty" 1 479 "int16" `578 
F B "pwm_set_duty" 1 479 "void(int8 stream,int16 duty)" `576 
F N "pwm_set_duty_percent" 1 480 ""
V L "percent" 1 480 "int16" `580 
F B "pwm_set_duty_percent" 1 480 "void(int16 percent)" `579 
F N "pwm_set_duty_percent" 1 481 ""
V L "stream" 1 481 "int8" `582 
V L "percent" 1 481 "int16" `583 
F B "pwm_set_duty_percent" 1 481 "void(int8 stream,int16 percent)" `581 
F N "pwm_set_frequency" 1 482 ""
V L "frequency" 1 482 "int32" `585 
F B "pwm_set_frequency" 1 482 "void(int32 frequency)" `584 
F N "pwm_set_frequency" 1 483 ""
V L "stream" 1 483 "int8" `587 
V L "frequency" 1 483 "int32" `588 
F B "pwm_set_frequency" 1 483 "void(int8 stream,int32 frequency)" `586 
F N "pwm_get_duty_period" 1 484 ""
F B "pwm_get_duty_period" 1 484 "int16()" `589 
F N "pwm_get_duty_period" 1 485 ""
V L "stream" 1 485 "int8" `591 
F B "pwm_get_duty_period" 1 485 "int16(int8 stream)" `590  "#use capture() Prototypes:"
F N "get_capture_time" 1 488 ""
F B "get_capture_time" 1 488 "int16()" `592 
F N "get_capture_time" 1 489 ""
V L "stream" 1 489 "int8" `594 
F B "get_capture_time" 1 489 "int16(int8 stream)" `593 
F N "get_capture_event" 1 490 ""
F B "get_capture_event" 1 490 "int8()" `595 
F N "get_capture_event" 1 491 ""
V L "stream" 1 491 "int8" `597 
F B "get_capture_event" 1 491 "int8(int8 stream)" `596  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
F N "goto_address" 1 504 ""
V L "address" 1 504 "int16" `599 
F B "goto_address" 1 504 "void(int16 address)" `598 
F N "label_address" 1 505 ""
V L "label" 1 505 "int16" `601 
F B "label_address" 1 505 "int16(int16 label)" `600  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 512 "unsigned int8"
F N "read_eeprom" 1 515 ""
V L "address" 1 515 "int8" `603 
F B "read_eeprom" 1 515 "int8(int8 address)" `602 
F N "write_eeprom" 1 516 ""
V L "address" 1 516 "int8" `605 
V L "value" 1 516 "int8" `606 
F B "write_eeprom" 1 516 "void(int8 address,int8 value)" `604  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
F N "enable_interrupts" 1 523 ""
V L "interrupt" 1 523 "int32" `608 
F B "enable_interrupts" 1 523 "void(int32 interrupt)" `607 
F N "disable_interrupts" 1 524 ""
V L "interrupt" 1 524 "int32" `610 
F B "disable_interrupts" 1 524 "void(int32 interrupt)" `609 
F N "clear_interrupt" 1 525 ""
V L "interrupt" 1 525 "int32" `612 
F B "clear_interrupt" 1 525 "void(int32 interrupt)" `611 
F N "interrupt_active" 1 526 ""
V L "interrupt" 1 526 "int32" `614 
F B "interrupt_active" 1 526 "int8(int32 interrupt)" `613 
F N "interrupt_enabled" 1 527 ""
V L "interrupt" 1 527 "int32" `616 
F B "interrupt_enabled" 1 527 "int8(int32 interrupt)" `615 
F N "ext_int_edge" 1 528 ""
V L "source" 1 528 "int8" `618 
V L "edge" 1 528 "int8" `619 
F B "ext_int_edge" 1 528 "void(int8 source,int8 edge)" `617 
F N "jump_to_isr" 1 529 ""
V L "address" 1 529 "int16" `621 
F B "jump_to_isr" 1 529 "void(int16 address)" `620  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 531 "0x40"
D G "H_TO_L" 1 532 "0"
D G "GLOBAL" 1 534 "0x0BC0"
D G "PERIPH" 1 535 "0x0B40"
D G "INT_RTCC" 1 536 "0x000B20"
D G "INT_RB" 1 537 "0x00FF0B08"
D G "INT_EXT_L2H" 1 538 "0x50000B10"
D G "INT_EXT_H2L" 1 539 "0x60000B10"
D G "INT_EXT" 1 540 "0x000B10"
D G "INT_TBE" 1 541 "0x008C10"
D G "INT_RDA" 1 542 "0x008C20"
D G "INT_TIMER1" 1 543 "0x008C01"
D G "INT_TIMER2" 1 544 "0x008C02"
D G "INT_CCP1" 1 545 "0x008C04"
D G "INT_COMP" 1 546 "0x008C40"
D G "INT_TIMER0" 1 547 "0x000B20"
D G "INT_EEPROM" 1 548 "0x008C80"
D G "LED" 0 15 "PIN_B0"
D G "TEMPO" 0 16 "500"
F N "main" 0 18 ""
F G "main" 0 18 "void()" `626 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "delay_ms" 1 0
F B "delay_us" 1 0
